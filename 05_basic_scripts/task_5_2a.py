# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
from sys import argv

source=input('Введите IP адрес в формате: 10.1.1.0/24  ')

source_list=source.replace('/', '.').split('.')
source_list=list(source_list)
print (type(source_list))

source_list.insert(3, '0')

# source_list_mod=source_list_mod.insert(3, '0')
ip_oct1=int(source_list[0])
ip_oct2=int(source_list[1])
ip_oct3=int(source_list[2])
ip_oct4=int(source_list[3])
mask=int(source_list[4])

print('\n')
print (f'''
Network:
{ip_oct1:<10} {ip_oct2:<10} {ip_oct3:<10} {ip_oct4:<10} 
{ip_oct1:>010b} {ip_oct2:>010b} {ip_oct3:>010b} {ip_oct4:>010b} 
      ''')

bit_mask='1' * mask + '0' * (32-mask)

bit_mask_oct1=bit_mask[:8]
bit_mask_oct2=bit_mask[8:16]
bit_mask_oct3=bit_mask[16:24]
bit_mask_oct4=bit_mask[24:]

bit_mask_1=int(bit_mask_oct1,2)
bit_mask_2=int(bit_mask_oct2,2)
bit_mask_3=int(bit_mask_oct3,2)
bit_mask_4=int(bit_mask_oct4,2)

print (f'''
Mask:
/'''+str(mask)+f'''
{bit_mask_1:<10} {bit_mask_2:<10} {bit_mask_3:<10} {bit_mask_4:<10} 
{bit_mask_oct1:<10} {bit_mask_oct2:<10} {bit_mask_oct3:<10} {bit_mask_oct4:<10} 
''')
